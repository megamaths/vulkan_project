#version 450

struct sphere{
    //xyz is center w is radius
    vec4 dim;
};

struct triangle{
    vec3 v1;
    vec3 v2;
    vec3 v3;
};

struct material{
    vec3 col;
    vec3 emmision;
    float roughness;
};


layout (binding = 0, rgba16) uniform writeonly image2D outputImage;

layout (binding = 1, rgba16) uniform readonly image2D lastOutputImage;

layout (binding = 2) uniform computeState{
    vec3 pos;
    vec2 angles;
    vec2 screenExtent;
    int frame;
    int numRootBVs;
} state;

layout(binding = 3) uniform spheres{
    //xyz is center w is radius
    vec4 dim[16];
    // material index
    ivec4 mat[4];
} s;

layout(binding = 4) uniform materials{
    //xyz is colour w is roughness
    vec4 colAndR[16];
    // xyz is emmision w is not used
    vec4 emmision[16];
    // x n val , y chance zw not used
    vec4 refractionVals[16];
} m;

layout(binding = 5) readonly buffer indicies{
    // xyz are index for 1 triangle w is mat
    ivec4 indx[];
} inds;

layout(binding = 6) readonly buffer verticies{
    // xyz are vert pos
    vec4 verts[];
} verts;

layout(binding = 7) readonly buffer bvh{
    // a large block of data
    vec4 data[];
} bvhData;

struct ray{
    vec3 dir;
    vec3 start;
    // cumalative colour
    vec3 colour;
    // colour absorbsion
    vec3 absorbsion;

    // refractive index
    float mediumN;
};

float interSectAABB(ray testRay, vec3 mins, vec3 maxes){
    vec3 t0 = (mins-testRay.start)/testRay.dir;
    vec3 t1 = (maxes-testRay.start)/testRay.dir;
    vec3 tmin = min(t0,t1);
    vec3 tmax = max(t0,t1);

    float dstA = max(max(tmin.x,tmin.y),tmin.z);
    float dstB = min(min(tmax.x,tmax.y),tmax.z);

    // case 1 intersect A from outside 0 < a < b
    // case 2 intersect from inside a < 0 < b
    // case 3 no intersect a > b

    //float distToBox = max(0,dstA);
    //float distInBox = max(0,dstB-distToBox);

    return dstA > dstB ? 65536 : max(0,dstA);// if dist to box > dist to out of box return 65536 else return dist to box
}

float intersectSphere(ray testRay, sphere testSphere){

	vec3 L = testSphere.dim.xyz - testRay.start;
	float tc = dot(L, testRay.dir);
	if ( tc < 0.0 ) return 65536;
	
	float d2 = abs((tc*tc) - (dot(L,L)));
    float r2 = testSphere.dim.w*testSphere.dim.w;
	if ( d2 > r2) return 65536;
	
	float t1c = sqrt( r2 - d2 );
	
	float t1 = tc - t1c;
	float t2 = tc + t1c;

	if ( t1 < 0.0) return t2;
    return t1;
}

vec3 normalSphere(ray testRay ,float d, vec3 center){
    return normalize(testRay.start+testRay.dir*d-center);
}

vec3 normalTriangle(triangle t){
    return normalize(cross(t.v2-t.v1,t.v3-t.v1));
}

float intersectTriangle(ray testRay, triangle testTri){

    vec3 n = normalTriangle(testTri);
    float d = -dot(n,testTri.v1);

    float t = - (dot(n, testRay.start) + d) / dot(n, testRay.dir);
    // dist = abs(n.p + d)/n.v

    if (t < 0){
        return 65536;
    }

    vec3 pos = testRay.start + t*testRay.dir;

    vec3 edge0 = testTri.v2 - testTri.v1;
    vec3 edge1 = testTri.v3 - testTri.v2;
    vec3 edge2 = testTri.v1 - testTri.v3;
    vec3 C0 = pos - testTri.v1;
    vec3 C1 = pos - testTri.v2;
    vec3 C2 = pos - testTri.v3;
    vec3 sides = vec3(dot(n, cross(edge0, C0)) > 0 ,dot(n, cross(edge1, C1)) > 0 , dot(n, cross(edge2, C2)) > 0);
    if (sides[0] == sides[1] && sides[0] == sides[2]) return t; // P is inside the triangle

	return 65536;
}


int seed = 0;

void setSeed(int x){
    seed = x;
    seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
}

int randVal(){
    
    seed ^= (seed << 13);
    seed ^= (seed >> 17);
    seed ^= (seed << 5);
    return seed;
}

vec3 randDirection(){

    vec3 dir = vec3(randVal()%256/128.0-1.0,randVal()%256/128.0-1.0,randVal()%256/128.0-1.0);
    for (int i = 0; i < 4 && length(dir) > 1; i++){
        dir = vec3(randVal()%256/128.0-1.0,randVal()%256/128.0-1.0,randVal()%256/128.0-1.0);
    }

    return normalize(dir);
}

float randfloat(){
    return randVal()%256/128.0-1.0;
}

ray traceRay(ray mainRay){

    ray retRay;
    retRay.colour = mainRay.colour;
    retRay.absorbsion = mainRay.absorbsion;
    retRay.mediumN = mainRay.mediumN;


    vec3 normal = vec3(0,0,0);
    float dist = 65536;

    float abience = 0.01;

    int materialIndex = 15;

    

    int neededTestingBVs[256];// bvs indexed to in ubo
    int endStack = 0;
    // implemented as a stack

    for (int i = 0; i < state.numRootBVs && i < 16; i++){
        neededTestingBVs[i] = i*3;// because of stride = 3
        endStack = i;
    }

    int max_i = 0;
    for (int i = 0; i < 10000; i++){// effective while but with safty limits

        // each of first 12n floats are root nodes
        // float 1: data start
        // float 2: data num items
        // float 3: data stride
        // float 4: data type
        // float 5-7: mins
        // float 9-11: maxes
        if (endStack == -1 || endStack == 256){
            //if (endStack == 256){
            //    retRay.colour = vec3(1.0,0.0,0.0);
            //}
            break;
            // finished all items in stack or overFlowed
        }
        int index = neededTestingBVs[endStack];
        endStack--;// effectivly telling the list ive finished this one so if adding new items will not leave this in

        float boxDist = interSectAABB(mainRay,bvhData.data[index+1].xyz,bvhData.data[index+2].xyz);
        if (boxDist < dist){// intersects AABB and before previous thing does
            int dataStart = int(bvhData.data[index].x);
            int numItems = int(bvhData.data[index].y);
            int dataStride = int(bvhData.data[index].z);
            //retRay.colour = vec3(bvhData.data[3*index].xyz)/16.0;
            //dist = min(dist,16);
            switch (int(bvhData.data[index].w)){
                case 0:// another bv
                    // data stride should be 3
                    // not sure if this helps it seems to take exactly the same amount of time
                    if (numItems == 2){
                        // this if is expensive should find way to avoid repeat
                        if (interSectAABB(mainRay,bvhData.data[dataStart+1].xyz,bvhData.data[dataStart+2].xyz) <
                            interSectAABB(mainRay,bvhData.data[dataStart+1+dataStride].xyz,bvhData.data[dataStart+2+dataStride].xyz)){
                            endStack++;
                            neededTestingBVs[endStack] = dataStart+dataStride;
                            endStack++;
                            neededTestingBVs[endStack] = dataStart;
                        }
                        else{
                            endStack++;
                            neededTestingBVs[endStack] = dataStart;
                            endStack++;
                            neededTestingBVs[endStack] = dataStart+dataStride;
                        }
                    }
                    else{
                        for (int i = dataStart; i < dataStart+ dataStride*numItems; i += dataStride){
                            endStack++;
                            neededTestingBVs[endStack] = i;
                        }
                    }
                    break;
                case 1:// triangles (indexed)
                    // data stride should be 1
                    //mainRay.colour = vec3(1,0,0);

                    for (int i = dataStart; i < dataStart+ dataStride*numItems; i+= dataStride){
                        triangle tri;
                        tri.v1 = verts.verts[inds.indx[i].x].xyz;
                        tri.v2 = verts.verts[inds.indx[i].y].xyz;
                        tri.v3 = verts.verts[inds.indx[i].z].xyz;
                        //vec3 n = normalTriangle(tri);
                        //if (dot(n,mainRay.dir) < 0){ // blender format is different to my cube some times not all time
                        //    continue;
                        //}

                        float newdist = intersectTriangle(mainRay, tri);
                        if (newdist < dist){

                            int matNum = int(inds.indx[i].w);

                            //vec3 pos = mainRay.start + mainRay.dir*newdist;
                            //vec3 n = normalTriangle(tri);
                            //vec3 edge0 = tri.v2 - tri.v1;
                            //vec3 edge1 = tri.v3 - tri.v2;
                            //vec3 edge2 = tri.v1 - tri.v3;
                            //vec3 C0 = pos - tri.v1;
                            //vec3 C1 = pos - tri.v2;
                            //vec3 C2 = pos - tri.v3;
                            //vec3 sides = vec3(dot(n, cross(edge0, C0)) , dot(n, cross(edge1, C1)), dot(n, cross(edge2, C2)));
                            normal = normalTriangle(tri);
                            if (dot(normal,mainRay.dir) > 0){
                                normal *= -1;
                            }
                            materialIndex = matNum;
                        }
                        dist = abs(min(dist,newdist));
                    }

                    break;
                case 2:// spheres
                    // data stride should be 1 for all normal aplications as I am now indexing into the spheres buffer
                    for (int i = dataStart; i < dataStart+ dataStride*numItems ; i+= dataStride){
                        sphere newSphere;

                        newSphere.dim = s.dim[i];
                        int matind = int(s.mat[i/4][i%4]);

                        float newdist = intersectSphere(mainRay, newSphere);
                        if (newdist < dist){
                            normal = normalSphere(mainRay,newdist,newSphere.dim.xyz);
                            materialIndex = matind;
                        }
                        dist = abs(min(dist,newdist));
                    }

                    break;
                //default:
                    
            }
        }
        max_i = i;
    }
    retRay.colour += vec3(float(max_i)/500.0);
    if (max_i > 500){
        retRay.colour = vec3(1.0,0.0,0.0);
    }


    if (dist > 65535){ // miss
        retRay.colour += retRay.absorbsion*vec3(0.0,0.0,0.0);// adds the voids colour
        retRay.absorbsion = vec3(0.0);
        return retRay;// ?? as absorbsion is 0 should not try to reflect of the void
    }

    float roughness = m.colAndR[materialIndex].w;
    vec3 newCol = m.colAndR[materialIndex].xyz;
    vec3 emmision = m.emmision[materialIndex].xyz;
    retRay.mediumN = m.refractionVals[materialIndex].x;
    float refractChance = m.refractionVals[materialIndex].y;

    if (abs(randVal())/256%16 == 0){//specular reflection
        roughness = 0;
    }

    if (dot(mainRay.dir,normal) > 0){// leaving object
        retRay.mediumN = 1;
        normal = -normal;
    }



    // if hit

    vec3 reflectRay = reflect(mainRay.dir,normal);
    vec3 refractRay = refract(mainRay.dir,normal, mainRay.mediumN/retRay.mediumN);
    vec3 randDir = randDirection()*roughness;

    if (dot(randDir,normal) < 0){
        randDir = -randDir;
    }


    // previously nDotR was assuming perfect reflection
    float nDotR = 1.0;
    float offsetMult = 0.0005;
    if (abs(randVal())%1024/1024.0 > refractChance){// random choice reflect or refract
        retRay.dir = normalize(reflectRay + randDir);
        retRay.mediumN = mainRay.mediumN;
        nDotR = abs(dot(normal,retRay.dir));
    }
    else{
        retRay.dir = normalize(refractRay - randDir*0.01);
    }


    newCol = abs(newCol);

    retRay.start = mainRay.start + mainRay.dir * dist  +  retRay.dir *offsetMult;// not sure if last bit is nesisary it should prevent coliding with same object 2ce
                                                                                 // appears only nessisary for triangles not spheres
    retRay.colour = mainRay.colour + (mainRay.absorbsion)*emmision + newCol*abience;
    retRay.absorbsion *= newCol*nDotR;
    // this assumes that specular reflection does not cause any colour change compared to a 0 roughness surface

    return retRay;
}

// work group max size on desktop is 1024
// not sure what is on the mac
layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

void main(){

    ivec2 xy_int = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(outputImage);
    vec2 xy_float = vec2(gl_GlobalInvocationID.x / float(size.x), gl_GlobalInvocationID.y / float(size.y));
    setSeed(state.frame*1000000+(xy_int.x*1000+xy_int.y));


    ray mainray;

    vec3 colour = vec3(0);

    int numRays = 16;
    const int max_depth = 16;

    for (int i = 0; i < numRays; i++){

        vec2 anti_aliasing = vec2(randfloat()/float(size.x),randfloat()/float(size.y))*1.0;

        mainray.start = state.pos;
        mainray.dir = normalize(vec3((xy_float+vec2(-0.5,-0.5)+anti_aliasing)*state.screenExtent,1.0));
        mainray.colour = vec3(0.0);
        mainray.absorbsion = vec3(1.0);
        mainray.mediumN = 1.0;


        float phi = state.angles[0];
        vec3 newdir = vec3(mainray.dir[0],cos(phi)*mainray.dir[1]+sin(phi)*mainray.dir[2],-sin(phi)*mainray.dir[1]+cos(phi)*mainray.dir[2]);
        mainray.dir = newdir;

        float theta = state.angles[1];
        newdir = vec3(cos(theta)*mainray.dir[0]-sin(theta)*mainray.dir[2],mainray.dir[1],sin(theta)*mainray.dir[0]+cos(theta)*mainray.dir[2]);
        mainray.dir = newdir;

        int max_itr = 0;
        for (int itr = 0; itr < max_depth; itr++){
            max_itr = itr;
            mainray = traceRay(mainray);
            if (length(mainray.absorbsion) < 0.01){
                break;
            }
        }
        colour += mainray.colour /float(numRays);
        //colour += float(max_itr)/float(max_depth) /float(numRays);
        
    }
    //imageStore(outputImage, xy_int, vec4(vec3(1-dist) , 1.0f));

    vec3 sampleColour = imageLoad(lastOutputImage, xy_int).rgb;

    float keepOld = min(state.frame/float(1+state.frame),0.975);

    colour = (sampleColour*keepOld+colour*(1-keepOld));
    colour = abs(colour);
    imageStore(outputImage, xy_int, vec4(colour , 1.0f));
}